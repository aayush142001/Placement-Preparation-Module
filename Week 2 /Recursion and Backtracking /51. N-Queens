class Solution {
    
    public static List<String> construct(char[][]board){
        
        List<String>l=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            l.add(s);
        }
        return l;
    }
    
    public static void dfs(int col,List<List<String>>list,char[][]board,int[]leftrow,int[]ud,int[]ld){
        
        if(col==board.length){
            list.add(construct(board));
            return;
        }
        
        for(int row=0;row<board.length;row++){
            
            
            if(leftrow[row]==0 && ld[row+col]==0 && ud[board.length-1+col-row]==0){
                board[row][col]='Q';
                leftrow[row]=1;
                ld[row+col]=1;
                ud[board.length-1+col-row]=1;
                dfs(col+1,list,board,leftrow,ud,ld);
                board[row][col]='.';
                leftrow[row]=0;
                ld[row+col]=0;
                ud[board.length-1+col-row]=0;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        
        char[][]board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        
        int[]leftrow=new int[n];
        int[]ud=new int[2*n-1];   // upper diagonal
        int[]ld=new int[2*n-1];   // lower diagonal
        
        List<List<String>>list=new ArrayList<>();
        dfs(0,list,board,leftrow,ud,ld);
        
        return list;
        
    }
}
